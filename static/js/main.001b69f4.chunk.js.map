{"version":3,"sources":["Components/SavingAlert/checked.png","util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","accessToken","SearchBar","props","state","term","search","bind","handleTermChange","onKeyPress","this","onSearch","event","setState","target","value","key","inputValue","className","placeholder","type","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlayList","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","isActive","handleShow","playlistName","updatePlaylistName","savePlaylist","find","savedTrack","push","filter","currentTrack","src","Logo","height","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.001b69f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/checked.7988bc0d.png\";","\r\n  const clientId = '35d2da3c39db4c97ae894bc76ff6e725';\r\n  const redirectUri = 'http://localhost:3000/';\r\n\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if(accessToken) {\r\n            return accessToken;\r\n        }\r\n\r\n    //check for token match\r\n\r\nconst accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\nconst expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if (accessTokenMatch && expiresInMatch) {\r\n        accessToken = accessTokenMatch[1];\r\n        const expiresIn = Number(expiresInMatch[1]);\r\n        //This clears the parameters, allowing us to grab a new access token when it expires.\r\n        window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n        window.history.pushState('Access Token', null, '/');\r\n        return accessToken;\r\n        } else{\r\n        const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n        window.location = accessUrl;\r\n    }\r\n\r\n    },\r\n\r\n    search(term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,{\r\n            headers : {\r\n                Authorization: `Bearer ${accessToken}` \r\n            }\r\n        }).then(response => {\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            if (!jsonResponse.tracks) {\r\n                return [];\r\n            }\r\n            return jsonResponse.tracks.items.map(track => ({\r\n                id: track.id,\r\n                name: track.name,\r\n                artist: track.artists[0].name,\r\n                album: track.album.name,\r\n                uri: track.uri\r\n            }));\r\n\r\n        });\r\n\r\n    },\r\n\r\n    savePlayList(name, trackUris) {\r\n        if(!name || !trackUris.length) {\r\n            return;\r\n        }\r\n\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = {Authorization: `Bearer ${accessToken}`};\r\n        let userId;\r\n\r\n        return fetch('https://api.spotify.com/v1/me', {headers: headers}\r\n        ).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n            userId = jsonResponse.id;\r\n            return fetch(`/v1/users/${userId}/playlists`,\r\n            { \r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({name: name})\r\n\r\n            }).then(response => response.json()\r\n            ).then( jsonResponse => {\r\n                const playlistId = jsonResponse.id;\r\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,{\r\n                    headers: headers,\r\n                    method: 'POST',\r\n                    body: JSON.stringify({uris: trackUris})\r\n                })\r\n            }) \r\n        })\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Spotify;\r\n","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {term: ''}\r\n\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n        this.onKeyPress = this.onKeyPress.bind(this);\r\n        \r\n    }\r\n\r\nsearch() {\r\nthis.props.onSearch(this.state.term);\r\n}\r\n\r\nhandleTermChange(event) {\r\n    this.setState({term : event.target.value});\r\n}\r\n \r\n\r\n    onKeyPress(event) {\r\n        if (event.key === \"Enter\") {\r\n          this.setState({ inputValue: event.target.value });\r\n          this.search();\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"SearchBar\">\r\n  <input placeholder=\"Enter a Song, Artist or Album\"\r\n  type=\"text\"\r\n    onChange={this.handleTermChange} \r\n    onKeyPress={this.onKeyPress}\r\n\r\n   />\r\n  <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component{\r\n    \r\nconstructor(props) {\r\n    super(props);\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n}\r\n\r\n    renderAction() {\r\n        if (this.props.isRemoval) {return <button className=\"Track-action\"\r\n         onClick={this.removeTrack}>-</button> }\r\n        else {\r\n            return <button className=\"Track-action\"  onClick={this.addTrack}>+</button> }\r\n    }\r\n\r\n    addTrack() {this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    removeTrack() {this.props.onRemove(this.props.track);\r\n    }\r\n\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"Track\">\r\n  <div className=\"Track-information\">\r\n    <h3>{this.props.track.name}</h3>\r\n    <p>{this.props.track.artist} |  {this.props.track.album} </p>\r\n  </div>\r\n  {this.renderAction()}\r\n  \r\n</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Track;","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track';\r\n\r\n\r\nclass TrackList extends React.Component{\r\n    \r\n    \r\n    render() {\r\n        return(\r\n            <div className=\"TrackList\">\r\n                {\r\n                        \r\n                        this.props.tracks.map(track => {\r\n                        return <Track   track={track} \r\n                                        key={track.id}\r\n                                        onAdd={this.props.onAdd}\r\n                                        onRemove={this.props.onRemove}\r\n                                        isRemoval= {this.props.isRemoval} />\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TrackList;","import React from 'react';\r\nimport './SearchResults.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass SearchResults extends React.Component{\r\n    \r\n    render() {\r\n        return(\r\n            <div className=\"SearchResults\">\r\n            <h2>Results</h2>\r\n            <TrackList tracks={this.props.searchResults}\r\n            onAdd={this.props.onAdd}\r\n            isRemoval={false} />\r\n</div>\r\n        ) \r\n    }\r\n}\r\n\r\nexport default SearchResults;","\r\nimport React from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\n\r\n\r\nclass Playlist extends React.Component{\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n      \r\n    }\r\n\r\n    handleNameChange(event) {\r\n        this.props.onNameChange(event.target.value);\r\n    }\r\n\r\n    \r\n    render() {\r\n        return(\r\n            <div className=\"Playlist\">\r\n  <input defaultValue={\"New Playlist\"} \r\n  onChange={this.handleNameChange}\r\n    />\r\n  \r\n  <TrackList tracks={this.props.playlistTracks}\r\n  onRemove={this.props.onRemove}\r\n  isRemoval={true} />\r\n  <button className=\"Playlist-save\" \r\n  onClick={this.props.onSave} \r\n    \r\n  >SAVE TO SPOTIFY</button>\r\n</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Playlist;\r\n","import React from 'react';\nimport './App.css';\n\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\nimport '../SavingAlert/Alert.css';\nimport Logo from '../SavingAlert/checked.png';\n\n\n\nclass App extends React.Component {\n  state = {\n    isActive:false  };\n\n handleShow = ()=>{\n     this.setState({\n         isActive: true      })\n }\n \n\n\nconstructor(props) {\n  super(props);\n  this.state = {\n    searchResults: [],\n    playlistName : 'New Playlist',\n    playlistTracks : []\n\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n \n    \n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;}\n      \n      tracks.push(track);\n      this.setState({playlistTracks:tracks});\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n    this.setState({playlistTracks : tracks}); \n  }\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name});\n  }\n\n  \n  savePlaylist() {\n    this.handleShow(); \n    // const trackUris = this.state.playlistTracks.map(track => track.uri);\n    // Spotify.savePlayList(this.state.playlistName, trackUris).then(() => {this.setState({\n    //   playlistName: 'New Playlist',\n    //   playlistTracks: []\n    // })});\n  \n  }\n  \n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults}) \n    });\n  }\n\n  render() {\n    return(\n      <div>\n  <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n      <div className=\"App\">\n        \n      <div>\n\n{this.state.isActive ?  <div className=\"alert\">\n<div className=\"pic\"> <img src={Logo} height=\"50px\"></img> </div>\n<p>Your Playlist has been saved</p>\n</div> : null }  \n\n</div>\n     \n        <SearchBar onSearch= {this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults}\n            onAdd={this.addTrack} />\n          <Playlist playlistName={this.state.playlistName} \n                    playlistTracks={this.state.playlistTracks}\n                    onRemove={this.removeTrack}\n                    onNameChange={this.updatePlaylistName}\n                    onSave = {this.savePlaylist}\n                     />\n                     \n    </div>\n  </div>\n</div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}